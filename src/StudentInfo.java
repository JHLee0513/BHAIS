import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import static java.lang.Integer.parseInt;
import java.sql.*;
import java.text.MessageFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author BrianLee
 */
public class StudentInfo extends javax.swing.JFrame {
Connection conn = null;
ResultSet rs = null;
PreparedStatement pst = null;
private int X = 0;
    /**
     * Creates new form StudentInfo
     */
    public StudentInfo() {
        initComponents();
        conn = javaconnect.ConnectDb();
        Update_table();
        table_Info.setAutoCreateRowSorter(true);
        CurrentDate();
    }
    private void CurrentDate(){
        Thread thread = new Thread(){
            public void run(){
                for(;;){
                        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        txt_Date.setText("Date: "+year+"/"+(month+1)+"/"+day);
        int hour = cal.get(Calendar.HOUR_OF_DAY);
        int minute = cal.get(Calendar.MINUTE);
        int sec = cal.get(Calendar.SECOND);
        txt_Time.setText("Time: "+hour +" : "+minute+" : "+sec);
                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(StudentInfo.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            }
        };
        thread.start();
    }
    
    private void Update_table(){
        if (X==0) {
            try{
        String sql = "select * from StudentInfoG";
        pst =conn.prepareStatement(sql);
        rs=pst.executeQuery();
    //pst.execute();
         table_Info.setModel(DbUtils.resultSetToTableModel(rs));
        
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e); 
        } finally{
            try{
                rs.close();
                pst.close();
            }
            catch(Exception e){}
        }
        }else if(X==1){
            try{
        String sql = "select * from StudentInfoB";
        pst =conn.prepareStatement(sql);
        rs=pst.executeQuery();
    //pst.execute();
         table_Info.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e); 
        } finally{
            try{
                rs.close();
                pst.close();
            }
            catch(Exception e){}
        }
        }else {
            JOptionPane.showMessageDialog(null, "Please select data from which gender you would like to see");
        }
        
    }
    
    public void close(){
        WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Info = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txt_Search = new javax.swing.JTextField();
        txt_Date = new javax.swing.JTextField();
        txt_Time = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txt_Noise = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_Temp = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_Sleep = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_Surname = new javax.swing.JTextField();
        txt_Wake = new javax.swing.JTextField();
        txt_Name = new javax.swing.JTextField();
        txt_Id = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_Visit = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_Tidiness = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Slider_Tidiness = new javax.swing.JSlider();
        Slider_Sleep = new javax.swing.JSlider();
        Slider_Noise = new javax.swing.JSlider();
        Slider_Wake = new javax.swing.JSlider();
        Slider_Visit = new javax.swing.JSlider();
        Slider_Temp = new javax.swing.JSlider();
        jLabel17 = new javax.swing.JLabel();
        txt_room1 = new javax.swing.JTextField();
        txt_room3 = new javax.swing.JTextField();
        txt_room4 = new javax.swing.JTextField();
        txt_room2 = new javax.swing.JTextField();
        cmb_Clear = new javax.swing.JButton();
        cmb_Delete = new javax.swing.JButton();
        cmb_Refresh = new javax.swing.JButton();
        cmb_Update = new javax.swing.JButton();
        cmb_Print = new javax.swing.JButton();
        cmb_Save = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txt_Max = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmb_Search = new javax.swing.JButton();
        combo_Search = new javax.swing.JComboBox();
        txt_Min = new javax.swing.JTextField();
        cmb_Attach = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmb_Bar = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        Combo_ScatterY = new javax.swing.JComboBox();
        Combo_ScatterX = new javax.swing.JComboBox();
        Combo_Bar = new javax.swing.JComboBox();
        cmb_Scatter = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        cmb_Boys = new javax.swing.JButton();
        cmb_Girls = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Meiryo", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("BHAIS");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UWClog.jpg"))); // NOI18N

        table_Info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_InfoMouseClicked(evt);
            }
        });
        table_Info.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                table_InfoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table_Info);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search by name/surname/id", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 13), new java.awt.Color(102, 51, 255))); // NOI18N

        txt_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_SearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Meiryo", 0, 13), new java.awt.Color(0, 153, 153))); // NOI18N

        jLabel7.setText("Tidiness");
        jLabel7.setToolTipText("This factor looks into the chose student's organization and level of tidiness. This also refers to the student's expectations regarding the cleanliness of the room. e.g. 1= clean 10 = very dirty.");

        jLabel3.setText("Id");
        jLabel3.setToolTipText("In UWCSEA each student is given with a unique ID number, which he/she often uses to identify oneself in school system, and thus the same may be done in this system.");

        jLabel11.setText("Temperature");
        jLabel11.setToolTipText("Average Room Temperature e.g. 1=cold 10=hot");

        jLabel5.setText("Surname");
        jLabel5.setToolTipText("The family name of the boarder");

        jLabel8.setText("Sleep sensistivity");
        jLabel8.setToolTipText("Some are heavy sleeper while some aren't. This refers to the sensitivity of students' sleep. e.g. 1 = very light 10 = very heavy\n");

        jLabel10.setText("No. of Visitors");
        jLabel10.setToolTipText("This refers to average number of visitors in a room that the student wants or is expecting. e.g. 1= very little 10 = as many visitors as possible.");

        jLabel4.setText("Name");
        jLabel4.setToolTipText("The given name of boarder");

        jLabel6.setText("Noise Level");
        jLabel6.setToolTipText("Noise level refers to the student's preference in the average noise level of the room or what they expect it to be. e.g. 1=quiet 10 = very noisy");

        jLabel9.setText("Wake up time");
        jLabel9.setToolTipText("The average time at which the chosen students wakes up. e.g. 1 = very early, 10 = very late\n");

        Slider_Tidiness.setMajorTickSpacing(1);
        Slider_Tidiness.setMaximum(10);
        Slider_Tidiness.setMinimum(1);
        Slider_Tidiness.setPaintTicks(true);
        Slider_Tidiness.setSnapToTicks(true);
        Slider_Tidiness.setToolTipText("");
        Slider_Tidiness.setValue(5);
        Slider_Tidiness.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_TidinessMouseDragged(evt);
            }
        });

        Slider_Sleep.setMajorTickSpacing(1);
        Slider_Sleep.setMaximum(10);
        Slider_Sleep.setMinimum(1);
        Slider_Sleep.setPaintTicks(true);
        Slider_Sleep.setSnapToTicks(true);
        Slider_Sleep.setValue(5);
        Slider_Sleep.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_SleepMouseDragged(evt);
            }
        });

        Slider_Noise.setMajorTickSpacing(1);
        Slider_Noise.setMaximum(10);
        Slider_Noise.setMinimum(1);
        Slider_Noise.setPaintTicks(true);
        Slider_Noise.setSnapToTicks(true);
        Slider_Noise.setToolTipText("");
        Slider_Noise.setValue(5);
        Slider_Noise.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_NoiseMouseDragged(evt);
            }
        });

        Slider_Wake.setMajorTickSpacing(1);
        Slider_Wake.setMaximum(10);
        Slider_Wake.setMinimum(1);
        Slider_Wake.setPaintTicks(true);
        Slider_Wake.setSnapToTicks(true);
        Slider_Wake.setValue(5);
        Slider_Wake.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_WakeMouseDragged(evt);
            }
        });

        Slider_Visit.setMajorTickSpacing(1);
        Slider_Visit.setMaximum(10);
        Slider_Visit.setMinimum(1);
        Slider_Visit.setPaintTicks(true);
        Slider_Visit.setSnapToTicks(true);
        Slider_Visit.setValue(5);
        Slider_Visit.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_VisitMouseDragged(evt);
            }
        });

        Slider_Temp.setMajorTickSpacing(1);
        Slider_Temp.setMaximum(10);
        Slider_Temp.setMinimum(1);
        Slider_Temp.setPaintTicks(true);
        Slider_Temp.setSnapToTicks(true);
        Slider_Temp.setValue(5);
        Slider_Temp.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Slider_TempMouseDragged(evt);
            }
        });

        jLabel17.setText("Preferred roommates:");
        jLabel17.setToolTipText("Each grade 12 boarder is given an opportunity to write down 4 roommates that they would like have as possible future roommates. \n");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Visit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Visit, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Temp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Temp, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Sleep, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Sleep, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Tidiness, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Tidiness, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Noise, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Noise, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txt_Wake, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Slider_Wake, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(txt_Id)
                            .addComponent(txt_Name)
                            .addComponent(txt_Surname)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_room1)
                            .addComponent(jLabel17)
                            .addComponent(txt_room3, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_room2)
                            .addComponent(txt_room4))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Noise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addComponent(Slider_Noise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Tidiness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(Slider_Tidiness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Sleep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(Slider_Sleep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Wake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(Slider_Wake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Visit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addComponent(Slider_Visit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_Temp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addComponent(Slider_Temp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_room1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_room2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_room3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_room4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        cmb_Clear.setText("Clear textfield");
        cmb_Clear.setToolTipText("Clears all the text that may currently lie in the search field, student information field.etc.");
        cmb_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ClearActionPerformed(evt);
            }
        });

        cmb_Delete.setText("Delete selected data");
        cmb_Delete.setToolTipText("Deletes the currently selected data, which his/her data should also be appearing in the 'Student Information' panel.");
        cmb_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_DeleteActionPerformed(evt);
            }
        });

        cmb_Refresh.setText("Refresh table");
        cmb_Refresh.setToolTipText("Refreshes the data table for any updates.");
        cmb_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_RefreshActionPerformed(evt);
            }
        });

        cmb_Update.setText("Update");
        cmb_Update.setToolTipText("Implements the edits made by the user to selected data using the 'Student Information' panel. ");
        cmb_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_UpdateActionPerformed(evt);
            }
        });

        cmb_Print.setText("Print dataset");
        cmb_Print.setToolTipText("Prints the whole data in table form.");
        cmb_Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_PrintActionPerformed(evt);
            }
        });

        cmb_Save.setText("Save new");
        cmb_Save.setToolTipText("Saves new data that has been inserted by the user through the 'Student Information' panel.");
        cmb_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_SaveActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ranged search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Sinhala Sangam MN", 0, 13), new java.awt.Color(0, 153, 102))); // NOI18N

        jLabel13.setText("Minimum");

        txt_Max.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_MaxActionPerformed(evt);
            }
        });

        jLabel12.setText("Maximum");

        cmb_Search.setText("Search");
        cmb_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_SearchActionPerformed(evt);
            }
        });

        combo_Search.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noise", "Tidiness", "Sleep", "Time", "Visitor", "Temp" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_Min, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(txt_Max))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmb_Search)))
                .addGap(61, 61, 61))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(combo_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(cmb_Search)))
        );

        cmb_Attach.setText("Attach CSV file");
        cmb_Attach.setToolTipText("Imports data from Comma Separated Values file. This button opens up another tab for such purpose.\n");
        cmb_Attach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_AttachActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pray emoji.png"))); // NOI18N
        jLabel14.setText("Created by Brian Lee");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Query search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS Reference Specialty", 0, 13), new java.awt.Color(0, 153, 153))); // NOI18N

        cmb_Bar.setText("Bar Chart");
        cmb_Bar.setToolTipText("Produces a bar chart that display chosen factor against all the students in database. ");
        cmb_Bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_BarActionPerformed(evt);
            }
        });

        jLabel16.setText("x axis");

        jLabel15.setText("y axis");

        Combo_ScatterY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noise", "Tidiness", "Sleep", "Time", "Visitor", "Temp", " " }));

        Combo_ScatterX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noise", "Tidiness", "Sleep", "Time", "Visitor", "Temp", " " }));

        Combo_Bar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noise", "Tidiness", "Sleep", "Time", "Visitor", "Temp", " " }));

        cmb_Scatter.setText("Scatter Chart");
        cmb_Scatter.setToolTipText("Produces a scatter-plot chart that displays selected factor under 'X axis' as the x value and selected factor under 'Y axis' as the y value in a (x,y) plotting format. ");
        cmb_Scatter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ScatterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmb_Bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Combo_Bar, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmb_Scatter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Combo_ScatterX, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Combo_ScatterY, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel15)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Combo_ScatterX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Combo_ScatterY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmb_Scatter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(Combo_Bar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmb_Bar)
                .addGap(18, 18, 18))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Load data for:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("STIXIntegralsD", 0, 13), new java.awt.Color(0, 153, 102))); // NOI18N

        cmb_Boys.setText("Boys");
        cmb_Boys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_BoysActionPerformed(evt);
            }
        });

        cmb_Girls.setText("Girls");
        cmb_Girls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_GirlsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmb_Girls)
                .addGap(18, 18, 18)
                .addComponent(cmb_Boys)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_Girls)
                    .addComponent(cmb_Boys))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmb_Attach, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Save, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Print, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Update, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Refresh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Delete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_Clear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_Time, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel14))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmb_Clear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Refresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Print)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_Attach)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_SearchKeyReleased
if (X==0) {
            try {
           
           String sql = "select * from StudentInfoG where Id =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
            
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
              try {
           
           String sql = "select * from StudentInfoG where Name =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
            
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
              try {
           
           String sql = "select * from StudentInfoG where Surname =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
}else if(X==1){
            try {
           
           String sql = "select * from StudentInfoB where Id =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
            
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
              try {
           
           String sql = "select * from StudentInfoB where Name =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
            
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
              try {
           
           String sql = "select * from StudentInfoB where Surname =?"; 
           pst=conn.prepareStatement(sql);
           pst.setString(1,txt_Search.getText());
           rs=pst.executeQuery();
           if(rs.next()){
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
           }
           
        }catch (Exception e){
           JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
}else {
    JOptionPane.showMessageDialog(null, "Please select a gender");
}
        

    }//GEN-LAST:event_txt_SearchKeyReleased

    private void table_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_InfoMouseClicked
        if(X==0){
                    try{
            int row=table_Info.getSelectedRow();
            String Table_click=(table_Info.getModel().getValueAt(row, 0).toString());
            String sql ="select * from StudentInfoG where Id='"+Table_click+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if (rs.next()){        
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);   
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
        }  else if(X==1){
                    try{
            int row=table_Info.getSelectedRow();
            String Table_click=(table_Info.getModel().getValueAt(row, 0).toString());
            String sql ="select * from StudentInfoB where Id='"+Table_click+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if (rs.next()){        
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);   
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
        }  else{
            JOptionPane.showMessageDialog(null, "Pelase select a gender");
        }
    }//GEN-LAST:event_table_InfoMouseClicked

    private void cmb_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ClearActionPerformed
        txt_Id.setText("");
        txt_Name.setText("");
        txt_Surname.setText("");
        txt_Noise.setText("");
        txt_Tidiness.setText("");
        txt_Sleep.setText("");
        txt_Wake.setText("");
        txt_Visit.setText("");
        txt_Temp.setText("");
        txt_Search.setText("");
        txt_room1.setText("");
        txt_room2.setText("");
        txt_room3.setText("");
        txt_room4.setText("");
        txt_Min.setText("");
        txt_Max.setText("");
    }//GEN-LAST:event_cmb_ClearActionPerformed

    private void cmb_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_DeleteActionPerformed
        int p=JOptionPane.showConfirmDialog(null, "Do you really want to delete?","Delete",JOptionPane.YES_NO_OPTION);
        if (p==0) {
            if(X==0){
                            String sql = "delete from StudentInfoG where Id=?";
             try{
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_Id.getText());
                pst.execute();
                JOptionPane.showMessageDialog(null, "Selected data deleted");
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }finally{
                try{
                pst.close();
                rs.close();
            }catch(Exception e){
            }Update_table();
            }   
            }else if(X==1){
                            String sql = "delete from StudentInfoB where Id=?";
             try{
                pst=conn.prepareStatement(sql);
                pst.setString(1, txt_Id.getText());
                pst.execute();
                JOptionPane.showMessageDialog(null, "Selected data deleted");
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }finally{
                try{
                pst.close();
                rs.close();
            }catch(Exception e){
            }Update_table();
            }   
            }else {
                JOptionPane.showMessageDialog(null, "Please choose a gender");
            }
        }
    }//GEN-LAST:event_cmb_DeleteActionPerformed

    private void cmb_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_RefreshActionPerformed
        try{
            Update_table();
            JOptionPane.showMessageDialog(null, "Table refreshed");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
                try{
                pst.close();
                rs.close();
            }catch(Exception e){
         }
         }  
        
    }//GEN-LAST:event_cmb_RefreshActionPerformed

    private void cmb_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_UpdateActionPerformed
if (X==0){
            try{
            int row = table_Info.getSelectedRow();
            String tableclick =(table_Info.getModel().getValueAt(row, 0).toString());
            String value1 = txt_Id.getText();
            String value2 = txt_Name.getText();
            String value3 = txt_Surname.getText();
            String value4 = txt_Noise.getText();
            String value5 = txt_Tidiness.getText();
            String value6 = txt_Sleep.getText();
            String value7 = txt_Wake.getText();
            String value8 = txt_Visit.getText();
            String value9 = txt_Temp.getText();
            String value10 = txt_room1.getText();
            String value11 = txt_room2.getText();
            String value12 = txt_room3.getText();
            String value13 = txt_room4.getText();
            
            String sql = "update StudentInfoG set Id= '" +value1+ "' , Name = '"+value2+"' , Surname = '"+value3+"' , Noise = '"+value4+ "' , Tidiness = '"+value5+"' , Sleep = '"+value6+"' , Time = '"+value7+"' , Visitor = '"+value8+"' , Temp = '"+value9+"', Room1='"+value10+"', Room2='"+value11+"' , Room3='"+value12+"', Room4='"+value13+"' where Id ='"+tableclick+"'";
            pst=conn.prepareStatement(sql);
            pst.executeUpdate();
            Update_table();
            JOptionPane.showMessageDialog(null, "Selected data edited");
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}else if(X==1){
            try{
            int row = table_Info.getSelectedRow();
            String tableclick =(table_Info.getModel().getValueAt(row, 0).toString());
            String value1 = txt_Id.getText();
            String value2 = txt_Name.getText();
            String value3 = txt_Surname.getText();
            String value4 = txt_Noise.getText();
            String value5 = txt_Tidiness.getText();
            String value6 = txt_Sleep.getText();
            String value7 = txt_Wake.getText();
            String value8 = txt_Visit.getText();
            String value9 = txt_Temp.getText();
            String value10 = txt_room1.getText();
            String value11 = txt_room2.getText();
            String value12 = txt_room3.getText();
            String value13 = txt_room4.getText();
            
            String sql = "update StudentInfoB set Id= '" +value1+ "' , Name = '"+value2+"' , Surname = '"+value3+"' , Noise = '"+value4+ "' , Tidiness = '"+value5+"' , Sleep = '"+value6+"' , Time = '"+value7+"' , Visitor = '"+value8+"' , Temp = '"+value9+"', Room1='"+value10+"', Room2='"+value11+"' , Room3='"+value12+"', Room4='"+value13+"' where id ='"+tableclick+"'";
            pst=conn.prepareStatement(sql);
            pst.executeUpdate();
            Update_table();
            JOptionPane.showMessageDialog(null, "Selected data edited");
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}else {
    JOptionPane.showMessageDialog(null, "Please choose a gender");
}
    }//GEN-LAST:event_cmb_UpdateActionPerformed

    private void cmb_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_PrintActionPerformed
        MessageFormat header = new MessageFormat("Report Print");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try
        {
            table_Info.print(JTable.PrintMode.NORMAL, header, footer);
        }
        catch(java.awt.print.PrinterException e){
            System.err.format("Cannot print", e.getMessage());
        } 
    }//GEN-LAST:event_cmb_PrintActionPerformed

    public int getX (){
        int ANSWER = this.X;
        return ANSWER;
    }
    
    private void cmb_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_SaveActionPerformed
if (X==0){
            try{
            String sql = "INSERT INTO StudentInfoG (Id,Name,Surname,Noise,Tidiness,Sleep,Time,Visitor,Temp,Room1,Room2,Room3,Room4) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.prepareStatement(sql);
            pst.setString(1, txt_Id.getText());
            pst.setString(2, txt_Name.getText());
            pst.setString(3, txt_Surname.getText());
            pst.setString(4, txt_Noise.getText());
            pst.setString(5, txt_Tidiness.getText());
            pst.setString(6, txt_Sleep.getText());
            pst.setString(7, txt_Wake.getText());
            pst.setString(8, txt_Visit.getText());
            pst.setString(9, txt_Temp.getText());
            pst.setString(10, txt_room1.getText());
            pst.setString(11, txt_room2.getText());
            pst.setString(12, txt_room3.getText());
            pst.setString(13, txt_room4.getText());
            pst.execute();
            JOptionPane.showMessageDialog(null, "Data saved");
            
        } catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
}
}Update_table();
}else if(X==1){
            try{
            String sql = "INSERT INTO StudentInfoB (Id,Name,Surname,Noise,Tidiness,Sleep,Time,Visitor,Temp,Room1,Room2,Room3,Room4) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.prepareStatement(sql);
            pst.setString(1, txt_Id.getText());
            pst.setString(2, txt_Name.getText());
            pst.setString(3, txt_Surname.getText());
            pst.setString(4, txt_Noise.getText());
            pst.setString(5, txt_Tidiness.getText());
            pst.setString(6, txt_Sleep.getText());
            pst.setString(7, txt_Wake.getText());
            pst.setString(8, txt_Visit.getText());
            pst.setString(9, txt_Temp.getText());
            pst.setString(10, txt_room1.getText());
            pst.setString(11, txt_room2.getText());
            pst.setString(12, txt_room3.getText());
            pst.setString(13, txt_room4.getText());
            pst.execute();
            JOptionPane.showMessageDialog(null, "Data saved");
            
        } catch(SQLException | HeadlessException e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
}
}Update_table();
}else{
    JOptionPane.showMessageDialog(null, "Please choose a gender");
}

    }//GEN-LAST:event_cmb_SaveActionPerformed

    private void txt_MaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_MaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_MaxActionPerformed

    private void cmb_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_SearchActionPerformed
String val1 = txt_Min.getText();
String val2 = txt_Max.getText();
String tmp = combo_Search.getSelectedItem().toString();
int ONE = parseInt(val1);
int TWO = parseInt(val2);

if(TWO<ONE){
    JOptionPane.showMessageDialog(null, "Error: Minimum is greater than minimum");
}else{
    if(X==0){
                if("Noise".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Noise between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Tidiness".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Tidiness between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Sleep".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Sleep between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Time".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Time between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Visitor".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Visitor between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Temp".equals(tmp)){
       try {
            String sql = "select * from StudentInfoG where Temp between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
    }else if(X==1){
            if("Noise".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Noise between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Tidiness".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Tidiness between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Sleep".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Sleep between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Time".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Time between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Visitor".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Visitor between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
        if("Temp".equals(tmp)){
       try {
            String sql = "select * from StudentInfoB where Temp between  '"+val1+"' and '"+val2+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            table_Info.setModel(DbUtils.resultSetToTableModel(rs));    
       }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
        }
}else {
        JOptionPane.showMessageDialog(null, "Please choose a gender");
        }
}   
       

    }//GEN-LAST:event_cmb_SearchActionPerformed

    private void cmb_BarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_BarActionPerformed
if(X==0){
            try {
            String choice = Combo_Bar.getSelectedItem().toString();
            if (choice.equalsIgnoreCase("Noise")){
                String query = "select Name, Noise from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","NOISE" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Tidiness")){
                String query = "select Name, Tidiness from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","TIDINESS" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if (choice.equalsIgnoreCase("Sleep")) {
                String query = "select Name, Sleep from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","SLEEP" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Time")){
                String query = "select Name, Time from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","WAKING UP" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Visitor")){
                String query = "select Name, Visitor from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","VISITOR LEVEL" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Temp")){
                String query = "select Name, Temp from StudentInfoG";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","TEMPERATURE" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}else if(X==1){
            try {
            String choice = Combo_Bar.getSelectedItem().toString();
            if (choice.equalsIgnoreCase("Noise")){
                String query = "select Name, Noise from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","NOISE" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Tidiness")){
                String query = "select Name, Tidiness from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","TIDINESS" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if (choice.equalsIgnoreCase("Sleep")) {
                String query = "select Name, Sleep from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","SLEEP" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Time")){
                String query = "select Name, Time from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","WAKING UP" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Visitor")){
                String query = "select Name, Visitor from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","VISITOR LEVEL" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }else if(choice.equalsIgnoreCase("Temp")){
                String query = "select Name, Temp from StudentInfoB";
                JDBCCategoryDataset dataset = new JDBCCategoryDataset(javaconnect.ConnectDb(), query);
                JFreeChart chart = ChartFactory.createBarChart("Query chart", "NAME","TEMPERATURE" , dataset, PlotOrientation.VERTICAL, false, true, true);
                BarRenderer renderer = null;
                CategoryPlot plot = null;
                renderer = new BarRenderer();
                ChartFrame frame = new ChartFrame("Query Chart", chart);
                frame.setVisible(true);
                frame.setSize(500,650);
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}else {
    JOptionPane.showMessageDialog(null, "Please choose a gender");
}
       

    }//GEN-LAST:event_cmb_BarActionPerformed

    private void Slider_NoiseMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_NoiseMouseDragged
        int value1 = Slider_Noise.getValue();
        String valueOne = ""+value1;
        txt_Noise.setText(valueOne);
    }//GEN-LAST:event_Slider_NoiseMouseDragged

    private void Slider_TidinessMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_TidinessMouseDragged
        int value1 = Slider_Tidiness.getValue();
        String valueOne = ""+value1;
        txt_Tidiness.setText(valueOne);
    }//GEN-LAST:event_Slider_TidinessMouseDragged

    private void Slider_SleepMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_SleepMouseDragged
        int value1 = Slider_Sleep.getValue();
        String valueOne = ""+value1;
        txt_Sleep.setText(valueOne);
    }//GEN-LAST:event_Slider_SleepMouseDragged

    private void Slider_WakeMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_WakeMouseDragged
        int value1 = Slider_Wake.getValue();
        String valueOne = ""+value1;
        txt_Wake.setText(valueOne);
    }//GEN-LAST:event_Slider_WakeMouseDragged

    private void Slider_VisitMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_VisitMouseDragged
        int value1 = Slider_Visit.getValue();
        String valueOne = ""+value1;
        txt_Visit.setText(valueOne);
    }//GEN-LAST:event_Slider_VisitMouseDragged

    private void Slider_TempMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Slider_TempMouseDragged
        int value1 = Slider_Temp.getValue();
        String valueOne = ""+value1;
        txt_Temp.setText(valueOne);
    }//GEN-LAST:event_Slider_TempMouseDragged

    private void table_InfoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_InfoKeyReleased
                     try{
            int row=table_Info.getSelectedRow();
            String Table_click=(table_Info.getModel().getValueAt(row, 0).toString());
            String sql ="select * from StudentInfo where Id='"+Table_click+"'";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if (rs.next()){        
               String add1=rs.getString("Id");
               txt_Id.setText(add1);
               String add2=rs.getString("Name");
               txt_Name.setText(add2);
               String add3=rs.getString("Surname");
               txt_Surname.setText(add3);
               String add4=rs.getString("Noise");
               txt_Noise.setText(add4);   
               int FOUR = Integer.parseInt(add4);
               Slider_Noise.setValue(FOUR);
               String add5=rs.getString("Tidiness");
               txt_Tidiness.setText(add5);
               int FIVE = Integer.parseInt(add5);
               Slider_Tidiness.setValue(FIVE);
               String add6=rs.getString("Sleep");
               txt_Sleep.setText(add6);
               int SIX = Integer.parseInt(add6);
               Slider_Sleep.setValue(SIX);
               String add7=rs.getString("Time");
               txt_Wake.setText(add7);
               int SEVEN = Integer.parseInt(add7);
               Slider_Wake.setValue(SEVEN);
               String add8=rs.getString("Visitor");
               txt_Visit.setText(add8);   
               int EIGHT = Integer.parseInt(add8);
               Slider_Visit.setValue(EIGHT);
               String add9=rs.getString("Temp");
               txt_Temp.setText(add9);   
               int NINE = Integer.parseInt(add9);
               Slider_Temp.setValue(NINE);
               String add10=rs.getString("Room1");
               txt_room1.setText(add10);
               String add11=rs.getString("Room2");
               txt_room2.setText(add11);
               String add12=rs.getString("Room3");
               txt_room3.setText(add12);
               String add13=rs.getString("Room4");
               txt_room4.setText(add13);
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
    }//GEN-LAST:event_table_InfoKeyReleased

    private void cmb_ScatterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ScatterActionPerformed
         try{
            XYSeriesCollection dataset = new XYSeriesCollection();
            XYSeries series = new XYSeries("Scatter");
            Statement stmt;
            String USER = "root";
            String PASS = "";
            Connection conn = DriverManager.getConnection("jdbc:sqlite:Student.sqlite");
            String Titlex = Combo_ScatterX.getSelectedItem().toString();
            String Titley = Combo_ScatterY.getSelectedItem().toString();
            JFreeChart chart = ChartFactory.createXYLineChart("Query Chart", Titlex, Titley, createDataset(),PlotOrientation.VERTICAL,true,true,true);
            final XYPlot xyplot = chart.getXYPlot();
            XYLineAndShapeRenderer ren = new XYLineAndShapeRenderer();
            ren.setSeriesLinesVisible(0,false);
            ren.setSeriesShapesVisible(1,false);
            ren.setBaseItemLabelGenerator(new MyXYItemLabelGenerator());
           // ren.setBaseItemLabelGenerator(labelgen);
            ren.setBaseItemLabelsVisible(true);
            xyplot.setRenderer(ren);
            BarRenderer renderer = null;
            CategoryPlot plot = null;
            renderer = new BarRenderer();
            ChartFrame frame = new ChartFrame("Query Chart",chart);
            frame.setVisible(true);
            frame.setSize(1400,700);
            frame.setLocation(25,50); 
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        } finally{
try{
pst.close();
rs.close();
}catch(Exception e){
} }
    }//GEN-LAST:event_cmb_ScatterActionPerformed

    private void cmb_AttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_AttachActionPerformed
        Frame_CSV fram = new Frame_CSV();
        fram.setVisible(true);
    }//GEN-LAST:event_cmb_AttachActionPerformed

    private void cmb_GirlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_GirlsActionPerformed
        X = 0;
        Update_table();    
    }//GEN-LAST:event_cmb_GirlsActionPerformed

    private void cmb_BoysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_BoysActionPerformed
        X=1;
        Update_table();
    }//GEN-LAST:event_cmb_BoysActionPerformed
private XYDataset createDataset( ){
        final XYSeriesCollection dataset = new XYSeriesCollection( );
        if(X==0){
                  try{
          String Titlex = Combo_ScatterX.getSelectedItem().toString();
          String Titley = Combo_ScatterY.getSelectedItem().toString();
          final XYSeries series1 = new XYSeries("("+Titlex+","+Titley+")");
          String sql = "select Name," +Titlex+" , "+Titley+ "   from StudentInfoG";
          pst=conn.prepareStatement(sql);
          rs=pst.executeQuery();
          while (rs.next()){   
          double x = Double.parseDouble(rs.getString(Titlex));
          double y = Double.parseDouble(rs.getString(Titley));
          String z = rs.getString("Name");
          LabelXYDataItem newpoint = new LabelXYDataItem(Double.parseDouble(rs.getString(Titlex)), Double.parseDouble(rs.getString(Titley)), z);
          series1.add(newpoint);
            } 
         dataset.addSeries(series1);
         return dataset;
      }catch (SQLException | NumberFormatException e){
          JOptionPane.showMessageDialog(null, e);
      }
        }else if(X==1){
                  try{
          String Titlex = Combo_ScatterX.getSelectedItem().toString();
          String Titley = Combo_ScatterY.getSelectedItem().toString();
          final XYSeries Series = new XYSeries("Series");
          String sql = "select " +Titlex+" , "+Titley+ " , Name  from StudentInfoB";
          pst=conn.prepareStatement(sql);
          rs=pst.executeQuery();
          while (rs.next()){   
          double x = Double.parseDouble(rs.getString(Titlex));
          double y = Double.parseDouble(rs.getString(Titley));
          String z = rs.getString("Name");
          LabelXYDataItem newpoint = new LabelXYDataItem(Double.parseDouble(rs.getString(Titlex)), Double.parseDouble(rs.getString(Titley)), z);
          Series.add(newpoint);
            }              
         dataset.addSeries( Series );          
      }catch (SQLException | NumberFormatException e){
          JOptionPane.showMessageDialog(null, e);
      }
        }else{
            JOptionPane.showMessageDialog(null, "Please choose a gender");
        }
      return dataset;
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Combo_Bar;
    private javax.swing.JComboBox Combo_ScatterX;
    private javax.swing.JComboBox Combo_ScatterY;
    private javax.swing.JSlider Slider_Noise;
    private javax.swing.JSlider Slider_Sleep;
    private javax.swing.JSlider Slider_Temp;
    private javax.swing.JSlider Slider_Tidiness;
    private javax.swing.JSlider Slider_Visit;
    private javax.swing.JSlider Slider_Wake;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmb_Attach;
    private javax.swing.JButton cmb_Bar;
    private javax.swing.JButton cmb_Boys;
    private javax.swing.JButton cmb_Clear;
    private javax.swing.JButton cmb_Delete;
    private javax.swing.JButton cmb_Girls;
    private javax.swing.JButton cmb_Print;
    private javax.swing.JButton cmb_Refresh;
    private javax.swing.JButton cmb_Save;
    private javax.swing.JButton cmb_Scatter;
    private javax.swing.JButton cmb_Search;
    private javax.swing.JButton cmb_Update;
    private javax.swing.JComboBox combo_Search;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_Info;
    private javax.swing.JTextField txt_Date;
    private javax.swing.JTextField txt_Id;
    private javax.swing.JTextField txt_Max;
    private javax.swing.JTextField txt_Min;
    private javax.swing.JTextField txt_Name;
    private javax.swing.JTextField txt_Noise;
    private javax.swing.JTextField txt_Search;
    private javax.swing.JTextField txt_Sleep;
    private javax.swing.JTextField txt_Surname;
    private javax.swing.JTextField txt_Temp;
    private javax.swing.JTextField txt_Tidiness;
    private javax.swing.JTextField txt_Time;
    private javax.swing.JTextField txt_Visit;
    private javax.swing.JTextField txt_Wake;
    private javax.swing.JTextField txt_room1;
    private javax.swing.JTextField txt_room2;
    private javax.swing.JTextField txt_room3;
    private javax.swing.JTextField txt_room4;
    // End of variables declaration//GEN-END:variables
}
